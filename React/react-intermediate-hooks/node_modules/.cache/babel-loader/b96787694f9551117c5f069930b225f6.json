{"ast":null,"code":"import _slicedToArray from \"/Users/ashish/Desktop/fm/React/react-intermediate-hooks/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/ashish/Desktop/fm/React/react-intermediate-hooks/src/State.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar StateComponent = function StateComponent() {\n  _s();\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isGreen = _useState2[0],\n      setIsGreen = _useState2[1];\n\n  useEffect(function () {}, [isGreen]);\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    onClick: function onClick() {\n      return setIsGreen(!isGreen);\n    },\n    style: {\n      color: isGreen ? \"limegreen\" : \"crimson\"\n    },\n    children: \"useState Example\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(StateComponent, \"bWtN74QyQ0o3oDYM9Ri7ERZDQCk=\");\n\n_c = StateComponent;\nexport default StateComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"StateComponent\");","map":{"version":3,"sources":["/Users/ashish/Desktop/fm/React/react-intermediate-hooks/src/State.js"],"names":["useEffect","useState","StateComponent","isGreen","setIsGreen","color"],"mappings":";;;;;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAAA;;AAC3B,kBAA8BD,QAAQ,CAAC,IAAD,CAAtC;AAAA;AAAA,MAAOE,OAAP;AAAA,MAAgBC,UAAhB;;AACAJ,EAAAA,SAAS,CAAC,YAAI,CACb,CADQ,EACP,CAACG,OAAD,CADO,CAAT;AAEA,sBACE;AACE,IAAA,OAAO,EAAE;AAAA,aAAMC,UAAU,CAAC,CAACD,OAAF,CAAhB;AAAA,KADX;AAEE,IAAA,KAAK,EAAE;AAAEE,MAAAA,KAAK,EAAEF,OAAO,GAAG,WAAH,GAAiB;AAAjC,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAQD,CAZD;;GAAMD,c;;KAAAA,c;AAcN,eAAeA,cAAf","sourcesContent":["import { useEffect, useState } from \"react\";\n\nconst StateComponent = () => {\n  const [isGreen, setIsGreen] = useState(true);\n  useEffect(()=>{\n  },[isGreen])\n  return (\n    <h1\n      onClick={() => setIsGreen(!isGreen)}\n      style={{ color: isGreen ? \"limegreen\" : \"crimson\" }}\n    >\n      useState Example\n    </h1>\n  );\n};\n\nexport default StateComponent;\n"]},"metadata":{},"sourceType":"module"}